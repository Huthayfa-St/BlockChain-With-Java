/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Project/Maven2/JavaApp/src/main/java/${packagePath}/${mainClassName}.java to edit this template
 */

package com.mycompany.chain;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author hutha
 */
public class BlockCh {

         private int index;
         private long timestamp;
         private String data;
         private String previousHash;
         private String hash;
         
         BlockCh(int index, String data, String previousHash) {
             this.index =index;
             this.data =data;
             this.previousHash = previousHash;
             this.timestamp = System.currentTimeMillis();
             this.hash =calculateHash();
         }

  
                 
         public int getIndex(){
         return index;
         }
         public void setindex(int index)
         {
             this.index=index;
         }
         public Long getTimeStamp(){
             return timestamp;
         }
         public void setTimestamp(Long timestamp){
             this.timestamp=timestamp;
         }
         public String getData(){
             return data;
         }
         public void setData(String data){
             this.data=data;
         }
         public String getPreviousHash(){
             return previousHash;
         }
         public void setPreviousHash(String previousHash){
             this.previousHash=previousHash;
         }
         public String getHash(){
             return hash;
         }
         public void setHash(String hash){
             this.hash=hash;
         }
         public final String calculateHash()  {
             String text=String.valueOf(index + previousHash + String.valueOf(timestamp) +String.valueOf(data));
             MessageDigest digest = null;
     try {
         digest = MessageDigest.getInstance("SHA-256");
     } catch (NoSuchAlgorithmException ex) {
         Logger.getLogger(BlockCh.class.getName()).log(Level.SEVERE, null, ex);
     }
             final byte bytes[]=digest.digest(text.getBytes());
             final StringBuilder hexString = new StringBuilder();
             for(final byte b:bytes){
                 String hex =Integer.toHexString(0xff &b);
                 if(hex.length()==1){
                     hexString.append('0');
                 }
             hexString.append(hex);
             }
            return hexString.toString();                 
         }
         
}
        
